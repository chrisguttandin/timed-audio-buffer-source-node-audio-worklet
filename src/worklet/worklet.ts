// This is the minified and stringified code of the timed-audio-buffer-source-node-audio-worklet-processor package.
export const worklet = `(()=>{"use strict";class e extends AudioWorkletProcessor{constructor({numberOfInputs:e,numberOfOutputs:t,outputChannelCount:o,processorOptions:r}){var n;const s="object"==typeof r&&null!==r&&"buffer"in r?r.buffer:null;if(!(null===s||Array.isArray(s)&&s.every(e=>e instanceof Float32Array)))throw new Error("The buffer needs to be either null or an array with where each element is a Float32Array.");if(1!==e)throw new Error("The numberOfInputs must be 1.");if(1!==t)throw new Error("The numberOfOutputs must be 1.");const i=null!==(n=null==s?void 0:s.length)&&void 0!==n?n:1;if(void 0===o||1!==o.length||i!==o[0])throw new Error("The outputChannelCount must match the number of channels of the buffer.");const u="object"==typeof r&&null!==r&&"position"in r?r.position:0;if("number"!=typeof u)throw new Error('The position needs to be of type "number".');const h="object"==typeof r&&null!==r&&"timestamp"in r?r.timestamp:0;if("number"!=typeof h)throw new Error('The timestamp needs to be of type "number".');const l="object"==typeof r&&null!==r&&"velocity"in r?r.velocity:0;if("number"!=typeof l||![0,1].includes(l))throw new Error("The velocity needs to be either 0 or 1.");super(),this._buffer=s,this._position=u,this._timestamp=h,this._velocity=l}process([e],[t]){if((null==e?void 0:e.length)>0){const[t]=e;t.length>1&&(this._position=Math.round(t[0]),this._timestamp=Math.round(t[1]),this._velocity=Math.round(t[2]))}if(null!==this._buffer){const e=this._buffer.length;for(let o=0;o<e;o+=1){const e=this._buffer[o],r=t[o];for(let t=0;t<128;t+=1){const o=this._position+(currentFrame-this._timestamp+t)*this._velocity;o>=0&&o<e.length&&(r[t]=e[o])}}}return!0}}e.parameterDescriptors=[],registerProcessor("timed-audio-buffer-source-node-audio-worklet-processor",e)})();`; // tslint:disable-line:max-line-length
